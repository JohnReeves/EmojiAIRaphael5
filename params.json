{
  "name": "Emojiairaphael5",
  "tagline": "",
  "body": "#1. Last Worksheet\r\n\r\n![Imgur](http://i.imgur.com/zK4xZhV.png)\r\n\r\nFind and open your JSFiddle link from last week - as we're going to be breeding our emojis!\r\n\r\n#2. Breed Button\r\n\r\nFirstly, we're going to need to draw ourselves another button to \"breed\" our emojis. We've already created a \"reset\" button so our code is incredibly similar, except we're drawing it to the right:\r\n\r\n```js\r\n//draw \"breed\" button\r\nvar breedButton = paper.rect(170, 20, 130, 40, 10);\r\nbreedButton.attr(\"fill\", \"#bfbfbf\");\r\n    \r\nvar breedText = paper.text(230, 40, \"Breed\");\r\nbreedText.attr(\"font-size\", \"24\");\r\n    \r\nbreedButton.click( function() {\r\n\r\n});\r\n```\r\n\r\nInside the breed button click we're going to start by giving ourselves a clear piece of paper:\r\n\r\n```js\r\npaper.clear();\r\n```\r\n\r\nMy code looks like this:\r\n\r\n![Imgur](http://i.imgur.com/uNLy9nU.png)\r\n\r\n#3. Breed Function\r\n\r\nWe're going to create ourselves a breed function, which will handle all of the logic around breeding emojis:\r\n\r\n```js\r\nfunction breedEmojis(){\r\n\r\n}\r\n```\r\n\r\nWe should then call this inside our breedButton, we should then also call drawShapes to draw our new baby emojis:\r\n\r\n```js\r\nbreedEmojis();\r\ndrawShapes();\r\n```\r\n\r\nMy code looks like this:\r\n\r\n![Imgur](http://i.imgur.com/KSRKzA5.png)\r\n\r\n#4. Breed Function (part 2)\r\n\r\nNow we have a lovely function to do all our breeding logic, the first thing we need to do is copy out all the parentA and parentB attributes so we can use them to deicde our babys genetics.\r\n\r\nFirstly we need to get our parents from our selectedEmojis array:\r\n\r\n```js\r\nvar parentA = selectedEmojis[0];\r\nvar parentB = selectedEmojis[1];\r\n```\r\n\r\nWe now need to some unecessary code to copy the properties of our object - we need to do this because of the way JavaScript \"copies\" objects. When we start over-writing our grid of emojis - that in turn would overwrite the \"saved\" selectedEmoji because it just copies the \"reference\" to the object, rather than copying the whole object.\r\n\r\nSo we now need to temporarily copy all the properties of our parent like this:\r\n\r\n```js\r\n\r\nvar A_fill = parentA.fill;\r\nvar B_fill = parentB.fill;\r\n\r\n```\r\n\r\nYou'll need to do this for *all* the properties for both parent A and parent B. After this we can clear the selectedEmojis array again - ready for the next generation!\r\n\r\n```js\r\nselectedEmojis = [];\r\n```\r\n\r\nMy code looks like this:\r\n\r\n![Imgur](http://i.imgur.com/INzdMO2.png)\r\n\r\n#5. Genetics\r\n\r\nNext, we're going to need to loop over all our emojis again and give a \"babyEmoji\" attributes based on it's parents like this:\r\n\r\n```js\r\nfor (var i = 0; i < emojis.length; i++) {\r\n  var babyEmoji = emojis[i];\r\n  \r\n}\r\n```\r\n\r\nSo we know from Science class that genetics are a 50/50 chance as to whether you get your mother or your fathers genes. We can mock this in our project by using our `randomNumber` function to generate a number between 1 and 100 for each of our attributes.\r\n\r\n```js\r\nvar fillChance = randomNumber(1, 100);\r\n```\r\n\r\nIf this number is less than 50 wen can pick parentA's attribute, if it's above we can use parentB's :\r\n\r\n```js\r\nif (fillChance < 50){\r\n  babyEmoji.fill = A_fill;\r\n} else {\r\n babyEmoji.fill = B_fill;\r\n}\r\n```\r\n\r\nYou need to \"roll the dice\" for each attribute your emoji can have.\r\n\r\nMy code looks like this:\r\n\r\n![Imgur](http://i.imgur.com/WJJgeFN.png)\r\n\r\n#6. Finishing\r\n\r\nBefore you move onto the next worksheet make sure all of your emoji properties are being decided by parent emojis when they're bred!\r\n\r\n:star: When you've finished - don't forget to save your JSFiddle and send us your link above. :star2:\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}